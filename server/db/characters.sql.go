// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: characters.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (id, game_id, main, body, health, job, hobby, phobia, item, info, ability)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, game_id, main, body, health, job, hobby, phobia, item, info, ability
`

type CreateCharacterParams struct {
	ID      uuid.UUID
	GameID  uuid.UUID
	Main    sql.NullString
	Body    sql.NullString
	Health  sql.NullString
	Job     sql.NullString
	Hobby   sql.NullString
	Phobia  sql.NullString
	Item    sql.NullString
	Info    sql.NullString
	Ability sql.NullString
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.ID,
		arg.GameID,
		arg.Main,
		arg.Body,
		arg.Health,
		arg.Job,
		arg.Hobby,
		arg.Phobia,
		arg.Item,
		arg.Info,
		arg.Ability,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Main,
		&i.Body,
		&i.Health,
		&i.Job,
		&i.Hobby,
		&i.Phobia,
		&i.Item,
		&i.Info,
		&i.Ability,
	)
	return i, err
}

const getAbility = `-- name: GetAbility :one
SELECT val FROM abilities
WHERE val NOT IN (
    SELECT ability FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetAbility(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getAbility, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getBody = `-- name: GetBody :one
SELECT val FROM bodies
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetBody(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getBody)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getHealth = `-- name: GetHealth :one
SELECT val FROM health
WHERE val NOT IN (
    SELECT health FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetHealth(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getHealth, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getHobby = `-- name: GetHobby :one
SELECT val FROM hobbies
WHERE val NOT IN (
    SELECT hobby FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetHobby(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getHobby, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getInfo = `-- name: GetInfo :one
SELECT val FROM info
WHERE val NOT IN (
    SELECT info FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetInfo(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getInfo, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getItem = `-- name: GetItem :one
SELECT val FROM items
WHERE val NOT IN (
    SELECT item FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getItem, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getJob = `-- name: GetJob :one
SELECT val FROM jobs
WHERE val NOT IN (
    SELECT job FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getJob, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}

const getPhobia = `-- name: GetPhobia :one
SELECT val FROM phobias
WHERE val NOT IN (
    SELECT phobia FROM characters
    WHERE game_id = $1
)
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetPhobia(ctx context.Context, gameID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getPhobia, gameID)
	var val string
	err := row.Scan(&val)
	return val, err
}
